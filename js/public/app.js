(function(angular, $, undefined){

'use strict';

angular.module('Tasks', ['restangular']).
	config(
		['$routeProvider', '$interpolateProvider',
		function ($routeProvider, $interpolateProvider) {

	$routeProvider.when('/', {
		templateUrl: 'main.html',
		controller: 'MainController'
	}).when('/:id', {
		templateUrl: 'main.html',
		controller: 'MainController'
	}).otherwise({
		redirectTo: '/'
	});
}]);

angular.module('Tasks').controller('ListController', ['$scope', function ($scope) {

	var _this = this;

	_this._isAddingList = false;
	_this._taskLists = [];

	_this.selectedList = null;

	$scope.addTaskList = function(taskListName)
	{
		_this._isAddingList = true;

		var id = _this._taskLists.length + 1;
		_this._taskLists.push({id: id, name: taskListName, numberOfTasks: 0});

		_this._isAddingList = false;
	};

	$scope.isAddingList = function()
	{
		return _this._isAddingList;
	};

	$scope.getTaskLists = function()
	{
		//$scope.friends = [{name:'John', age:25}, {name:'Mary', age:28}];
		return _this._taskLists;
	};

	$scope.addTaskList('Private Todos');
	$scope.addTaskList('Business Todos');

	$scope.selectTaskList = function(listId)
	{
		_this.selectedList = listId;
	};

	$scope.isSelected = function(listId)
	{
		return _this.selectedList == listId;
	};
}]);

angular.module('Tasks').controller('MainController', ['$scope', '$routeParams', function ($scope, $routeParams) {

	var _this = this;

	$scope.id = $routeParams.id;

	_this._isAddingTask = false;
	_this._tasks = [];

	$scope.addTask = function(taskName)
	{
		_this._isAddingTask = true;

		var id = _this._tasks.length + 1;
		_this._tasks.push({id: id, name: taskName, checked: false});

		_this._isAddingTask = false;
	};

	$scope.isAddingTask = function()
	{
		return _this._isAddingTask;
	};

	$scope.getTasks = function()
	{
		return _this._tasks;
	};

	$scope.deleteTask = function(taskId)
	{
		var result = $.grep(_this._tasks, function(e){ return e.id == taskId; });
		_this._tasks.splice(_this._tasks.indexOf(result),1);
	};

	$scope.addTask('Read book');
	$scope.addTask('Go diving');
	$scope.addTask('Drink beer');
}]);

angular.module('Tasks').directive('ocClickFocus', [
	'$timeout', function($timeout) {
		return function(scope, elm, attr) {
			var options;
			options = scope.$eval(attr.ocClickFocus);
			if (angular.isDefined(options) && angular.isDefined(options.selector)) {
				return elm.click(function() {
					if (angular.isDefined(options.timeout)) {
						return $timeout(function() {
							return $(options.selector).focus();
						}, options.timeout);
					} else {
						return $(options.selector).focus();
					}
				});
			}
		};
	}
]);



// Generated by CoffeeScript 1.4.0

/*

 ownCloud - App Framework

 @author Bernhard Posselt
 @copyright 2012 Bernhard Posselt dev@bernhard-posselt.com

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
 License as published by the Free Software Foundation; either
 version 3 of the License, or any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU AFFERO GENERAL PUBLIC LICENSE for more details.

 You should have received a copy of the GNU Affero General Public
 License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */



angular.module('Tasks').directive('ocClickSlideToggle', [
	'$rootScope', function($rootScope) {
		return function(scope, elm, attr) {
			var cssClass, options, slideArea;
			options = scope.$eval(attr.ocClickSlideToggle);
			if (angular.isDefined(options) && angular.isDefined(options.selector)) {
				slideArea = $(options.selector);
			} else {
				slideArea = elm;
			}
			if (angular.isDefined(options) && angular.isDefined(options.cssClass)) {
				cssClass = options.cssClass;
			} else {
				cssClass = false;
			}
			elm.click(function() {
				if (slideArea.is(':visible') && !slideArea.is(':animated')) {
					slideArea.slideUp();
					if (cssClass !== false) {
						return elm.removeClass('opened');
					}
				} else {
					slideArea.slideDown();
					if (cssClass !== false) {
						return elm.addClass('opened');
					}
				}
			});
			if (angular.isDefined(options) && angular.isDefined(options.hideOnFocusLost) && options.hideOnFocusLost) {
				$(document.body).click(function() {
					return $rootScope.$broadcast('ocLostFocus');
				});
				$rootScope.$on('ocLostFocus', function(scope, params) {
					if (params !== slideArea) {
						if (slideArea.is(':visible') && !slideArea.is(':animated')) {
							slideArea.slideUp();
							if (cssClass !== false) {
								return elm.removeClass('opened');
							}
						}
					}
				});
				slideArea.click(function(e) {
					$rootScope.$broadcast('ocLostFocus', slideArea);
					return e.stopPropagation();
				});
				return elm.click(function(e) {
					$rootScope.$broadcast('ocLostFocus', slideArea);
					return e.stopPropagation();
				});
			}
		};
	}
]);


})(angular, jQuery);